version: '3.8'

services:
  postgres:
    image: 'postgres:15.3'
    container_name: "cloud-postgres-prod"
    restart: always
    env_file: .env
    environment:
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
    ports:
      - "5433:5432"

    networks:
      - shared-network
    volumes:
      - postgres_data:/var/lib/postgresql/data



  minio:
    container_name: minio-prod
    image: minio/minio:latest
    command: server /data --console-address :9090
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - shared-network
    ports:
      - "9090:9090"
      - "9000:9000"

  mongo:
    image: mongo:7.0.16-jammy
    container_name: mongo-cloud-prod
    restart: always
    env_file: .env
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - shared-network
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - minio
      - postgres

  cloud-frontend:
    image: cloud-frontend:1.3
    container_name: cloud-frontend
    ports:
      - "80:80"
    networks:
      - shared-network
    depends_on:
      - cloud6x

  cloud6x:
    image: cloud6x:latest
    container_name: cloud6x
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    ports:
      - "8080:8080"
    env_file: .env
    networks:
      - shared-network
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
      - minio
      - mongo

volumes:
  postgres_data:
  minio-data:
  mongo_data:

networks:
  shared-network:
    name: shared-network
    driver: bridge